package provider

import (
	"encoding/binary"
	"github.com/wanderself/DataProvider/encrypt"
)

var (
	RC = []byte{149, 170, 5}
	STV = []byte{149, 170, 5}
	AC = []byte{149, 170, 5}
)

func Hatcher(code int) []byte {

	//device mid
	stvMid := []byte{0, 0, 134, 0}
	acMid := []byte{0, 1, 0, 1}
	rcMid := []byte{0, 130, 132, 1}

	switch code {
	case 3:
		bin := BinGen(RC)
		copy(bin[22:26], rcMid)
		return bin
	case 1:
		bin := BinGen(STV)
		copy(bin[22:26], stvMid)
		return bin
	case 0:
		bin := BinGen(AC)
		copy(bin[22:26], acMid)
		return bin
	default:
		jsn := []byte("{\"t\":\"notify\",\"mac\":\"2059a0b4214b\",\"mid\":\"30000\",\"tm\":\"20161230125211\",\"evt\":3,\"code\":21,\"p\":\"Pow\",\"o\":\"1\",\"v\":\"0\",\"msg\":\"sd\"}\n")
		return jsn
	}

}

func BinGen(datBody []byte) []byte {
	binHead := []byte{102, 103, 0, 17, 32, 89, 160, 181, 0, 121, 0, 0, 0, 0, 0, 0, 32, 89, 160, 181, 0, 121, 0, 0, 134, 0, 0, 0, 0, 1, 0, 0, 16, 9, 12, 9, 24, 22, 2}
	datHead := []byte{126, 126}
	datLen := len(datBody) + 4
	dat := make([]byte, getLen(datLen))
	copy(dat[0:2], datHead)
	dat[2] = byte(len(datBody) + 1)
	copy(dat[3:datLen], datBody)
	binHead[3] = byte(len(dat))
	bundle := encrypt.AesEncrypt(dat, encrypt.GetKey(1))
	bin := make([]byte, len(binHead) + len(bundle))
	copy(bin, binHead)
	copy(bin[len(binHead):], bundle)
	return bin
}

func getLen(len int) int {
	if len <= 16 {
		return 16
	} else {
		len = (len / 16 + 1) * 16
		return len
	}
}

func intToBytes(i int16) []byte {
	var buf = make([]byte, 2)
	binary.BigEndian.PutUint16(buf, uint16(i))
	return buf
}






//dat := []byte{102, 103, 0, 32, 32, 89, 160, 181, 0, 121, 0, 0, 0, 0, 0, 0, 32, 89, 160, 181, 0, 121, 0, 0, 134, 0, 0, 0, 0, 1, 0, 0, 16, 9, 12, 9, 24, 22, 2, 194, 186, 186, 167, 155, 104, 142, 138, 230, 2, 238, 212, 3, 18, 51, 109, 155, 65, 217, 191, 11, 57, 210, 238, 92, 57, 72, 225, 114, 245, 190, 159}

//hf content 198, 177, 248, 14, 120, 110, 228, 181, 251, 38, 142, 146, 169, 4, 171, 65, 218, 2, 87, 110, 118, 62, 14, 28, 221, 49, 234, 73, 199, 41, 224, 8, 40, 233, 12, 8, 110, 15, 207, 51, 236, 65, 23, 191, 112, 41, 33, 45, 140, 182, 130, 249, 89, 15, 82, 218, 142, 43, 62, 73, 146, 85, 77, 103, 181, 115, 123, 37, 71, 253, 165, 165, 249, 21, 35, 178, 54, 44, 158, 183

// head 102, 103, 0, 80, 32, 89, 160, 181, 0, 121, 0, 0, 0, 0, 0, 0, 32, 89, 160, 181, 0, 121, 0, 0, 134, 0, 0, 0, 0, 1, 0, 0, 16, 9, 12, 9, 24, 22, 2,
//ac content 6, 159, 130, 165, 170, 74, 232, 38, 210, 84, 29, 246, 106, 52, 27, 121, 202, 138, 36, 193, 158, 0, 45, 198, 180, 150, 135, 105, 77, 202, 154, 85, 202, 138, 36, 193, 158, 0, 45, 198, 180, 150, 135, 105, 77, 202, 154, 85, 132, 247, 246, 172, 31, 122, 19, 177, 30, 124, 147, 33, 169, 137, 138, 87, 195, 114, 14, 109, 97, 193, 169, 39, 224, 3, 146, 93, 178, 196, 128, 116, 195, 114, 14, 109, 97, 193, 169, 39, 224, 3, 146, 93, 178, 196, 128, 116, 117, 242, 216, 229, 232, 202, 162, 32, 146, 247, 116, 20, 180, 39, 7, 152, 202, 138, 36, 193, 158, 0, 45, 198, 180, 150, 135, 105, 77, 202, 154, 85, 202, 138, 36, 193, 158, 0, 45, 198, 180, 150, 135, 105, 77, 202, 154, 85, 80, 204, 47, 249, 226, 173, 248, 232, 185, 115, 54, 152, 135, 221, 147, 130, 195, 114, 14, 109, 97, 193, 169, 39, 224, 3, 146, 93, 178, 196, 128, 116, 195, 114, 14, 109, 97, 193, 169, 39, 224, 3, 146, 93, 178, 196, 128, 116, 104, 109, 67, 179, 35, 236, 220, 202, 238, 44, 151, 99, 94, 4, 30, 216

// head 102, 103, 0, 17, 32, 89, 160, 181, 0, 121, 0, 0, 0, 0, 0, 0, 32, 89, 160, 181, 0, 121, 0, 0, 134, 0, 0, 0, 0, 1, 0, 0, 16, 9, 12, 9, 24, 22, 2,
//rc content 194, 186, 186, 167, 155, 104, 142, 138, 230, 2, 238, 212, 3, 18, 51, 109, 155, 65, 217, 191, 11, 57, 210, 238, 92, 57, 72, 225, 114, 245, 190, 159
